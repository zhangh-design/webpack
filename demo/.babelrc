{
  "presets": [
    [
      "@babel/preset-env",
      {
        // 默认 false 可选值有 usage和entry，用来设置浏览器 polyfill
        /**
         * usage （真正的做到了按需加载，表示明确使用到的 Polyfill 引用，在一些 ES2015+ 语法不支持的环境下，每个需要用到 Polyfill 的引用时，会自动加上）
         * entry （比 usage 使用起来麻烦一些，还是看官网吧 https://www.babeljs.cn/docs/babel-preset-env#usebuiltins-entry ）
         */
        "useBuiltIns": "usage", // 一般情况下，个人建议直接使用 usage 就满足日常开发了。
        // 这个 corejs 一定要配置，Babel在7.4.0以后需要安装corejs这个核心库
        "corejs": {
          "version": 3
        },
        "modules": false, // 模块使用 es modules ，不使用 commonJS 规范
        // 目标浏览器或者对应的环境（browser/node）
        "targets": {
          // "chrome": "67",
          // "ie": "10"
          "browsers": ["> 1%", "last 2 versions", "not ie <= 8"]
        }
      }
    ]
  ],
  // 如果需要 babel 支持 动态import 导入模块的方式在低版本上要安装 @babel/plugin-syntax-dynamic-import（支持魔法注释） 插件，并在 plugins 中进行配置
  "plugins": [
    [
      "@babel/plugin-transform-runtime",
      {
        "corejs": false, // 默认值，可以不写
        "helpers": true, // 默认，可以不写
        "regenerator": false, // 通过 preset-env 已经使用了全局的 regeneratorRuntime, 不再需要 transform-runtime 提供的 不污染全局的 regeneratorRuntime
        "useESModules": true // 使用 es modules helpers, 减少 commonJS 语法代码
      }
    ],
    // 魔法注释
    ["@babel/plugin-syntax-dynamic-import"]
  ]
}
